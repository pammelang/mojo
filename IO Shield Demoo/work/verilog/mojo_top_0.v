/*
   This file was generated automatically by the Mojo IDE version B1.3.4.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module mojo_top_0 (
    input clk,
    input rst_n,
    output reg [7:0] led,
    input cclk,
    output reg spi_miso,
    input spi_ss,
    input spi_mosi,
    input spi_sck,
    output reg [3:0] spi_channel,
    input avr_tx,
    output reg avr_rx,
    input avr_rx_busy,
    output reg [23:0] io_led,
    output reg [7:0] io_seg,
    output reg [3:0] io_sel,
    input [4:0] io_button,
    input [23:0] io_dip,
    input portSum,
    input portCout,
    output reg portA,
    output reg portB,
    output reg portCin
  );
  
  
  
  reg rst;
  
  reg sum;
  
  reg cout;
  
  wire [1-1:0] M_reset_cond_out;
  reg [1-1:0] M_reset_cond_in;
  reset_conditioner_1 reset_cond (
    .clk(clk),
    .in(M_reset_cond_in),
    .out(M_reset_cond_out)
  );
  localparam CORRECT_state = 1'd0;
  localparam WRONG_state = 1'd1;
  
  reg M_state_d, M_state_q = CORRECT_state;
  
  always @* begin
    M_state_d = M_state_q;
    
    M_reset_cond_in = ~rst_n;
    rst = M_reset_cond_out;
    led = 8'h00;
    spi_miso = 1'bz;
    spi_channel = 4'bzzzz;
    avr_rx = 1'bz;
    io_led = 24'h000000;
    io_seg = 8'hff;
    io_sel = 4'hf;
    led[0+0-:1] = rst;
    portA = io_dip[0+0+0-:1];
    portB = io_dip[0+1+0-:1];
    portCin = io_dip[0+2+0-:1];
    sum = io_dip[0+0+0-:1] ^ io_dip[0+1+0-:1] ^ io_dip[0+2+0-:1];
    cout = (io_dip[0+1+0-:1] & io_dip[0+2+0-:1]) | (io_dip[0+0+0-:1] & io_dip[0+2+0-:1]) | (io_dip[0+0+0-:1] & io_dip[0+1+0-:1]);
    io_led[0+0+0-:1] = sum;
    io_led[0+1+0-:1] = cout;
    
    case (M_state_q)
      WRONG_state: begin
        io_led[16+0+0-:1] = 1'h0;
        if (sum == portSum && cout == portCout) begin
          M_state_d = CORRECT_state;
        end
      end
      CORRECT_state: begin
        io_led[16+0+0-:1] = 1'h1;
        if (sum != portSum && cout != portCout) begin
          M_state_d = WRONG_state;
        end
      end
    endcase
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_state_q <= 1'h0;
    end else begin
      M_state_q <= M_state_d;
    end
  end
  
endmodule
